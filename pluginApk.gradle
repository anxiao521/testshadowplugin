
apply plugin: 'com.tencent.shadow.plugin'

shadow {
    transform {
//        useHostContext = ['abc']
    }

    packagePlugin {
        pluginTypes {
            debug {
                loaderApkConfig = new Tuple2('xatestloader-debug.apk', ':xatestloader:assembleDebug')
                runtimeApkConfig = new Tuple2('xa-runtime-debug.apk', ':xa-runtime:assembleDebug')
                pluginApks {
                    pluginApk1 {
                        businessName =project.ext["businessName"]
                        partKey = project.ext['partKey']
                        buildTask =project.ext[ 'buildTaskDebug']
                        apkPath = project.ext['apkPathDebug']
                        hostWhiteList = ["com.tj.host_connector"]
                        uuid=project.ext["uuid"]
                    }
                }
            }
            release {
                loaderApkConfig = new Tuple2('xatestloader-release.apk', ':xatestloader:assembleRelease')
                runtimeApkConfig = new Tuple2('xa-runtime-release.apk', ':xa-runtime:assembleRelease')
                pluginApks {
                    pluginApk1 {
                        businessName =project.ext["businessName"]
                        partKey = project.ext['partKey']
                        buildTask =project.ext['buildTaskRelease']
                        apkPath = project.ext['apkPathRelease']
                        hostWhiteList = ["com.tj.host_connector"]
                        uuid=project.ext["uuid"]
                    }

                }
            }
        }
        loaderApkProjectPath = 'xatestloader/build/intermediates/apk/'
        runtimeApkProjectPath = 'xa-runtime/build/intermediates/apk/'

        archiveSuffix = project.ext["archiveSuffix"]?: ""
        archivePrefix = project.ext["archivePrefix"]
        destinationDir = "${getRootProject().getBuildDir()}"

        version = project.ext["version"]
        compactVersion = [1, 2, 3]
        uuidNickName = project.ext["uuidNickName"]
    }
}
